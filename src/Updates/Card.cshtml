@using System.Collections.Generic
@using Dynamicweb.Rendering
@inherits RazorTemplateBase<RazorTemplateModel<Template>>

@{
    var supportedLocales = new HashSet<string>(
        new[] { "zh-CN", "zh-TW", "da-DK", "nl-NL", "en-US", "fi-FI", "fr-FR", "de-DE", "it-IT", "ja-JP", "ko-KR", "no-NO", "pl-PL", "pt-BR", "ru-RU", "es-ES", "sv-SE" },
        StringComparer.OrdinalIgnoreCase
    );
    var currentLocale = GetGlobalValue("Global:Area.Culture.Name");
    if (!supportedLocales.Contains(currentLocale))
    {
        currentLocale = "en-US";
    }
}

<script src="@GetString("Adyen.JavaScriptUrl")"
        integrity="@GetString("Adyen.JsIntegrityKey")"
        crossorigin="anonymous"></script>

<link rel="stylesheet" href="@GetString("Adyen.CssUrl")"
      integrity="@GetString("Adyen.CssIntegrityKey")"
      crossorigin="anonymous">

<div id="card-container"></div>
<span style="color:red" id="errorsContainer"></span>

<script type="module">
    const baseUrl = '/Default.aspx?ID=@GetGlobalValue("Global:Page.ID")&CheckoutHandlerOrderID=@GetString("Ecom:Order.ID")&redirect=false';
    const configuration = {
        onSubmit: function (state, card) {
            processPaymentOperation(baseUrl + '&Action=UseSavedMethod', state.data, card);
        },
        onAdditionalDetails: (state, card) => { },
        onPaymentCompleted: (result, card) => { },
        showPayButton: true,
        locale: '@currentLocale',
        environment: '@GetString("Adyen.Environment")',
        clientKey: '@GetString("Adyen.ClientKey")',
        amount: {
            currency: '@GetString("Adyen.Currency")',
            value: @GetLong("Adyen.Price")
        },
        enableStoreDetails: true,
        paymentMethodsResponse: JSON.parse(`@GetString("Adyen.PaymentMethods")`)
	};

    const checkout = await AdyenCheckout(configuration);
    const paymentMethod = checkout.paymentMethodsResponse.storedPaymentMethods[0];
    const cardComponent = checkout.create('card', paymentMethod).mount('#card-container');

    async function processPaymentOperation(url, data, card) {
        const configuration = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        };
        const response = await fetch(url, configuration);
        if (!response.ok) {
            showError(`Something went wrong. Response status: ${response.status}`);
            return;
        }

        const json = await response.json();
        if (json.redirectToReceipt) {
            document.location = json.redirectToReceipt;
            return;
        }

        if (json.action) {
            card.handleAction(json.action);
        } else if (json.errorCode) {
            showError(json.message);
        } else {
            showError(null);
        }
    }

    function showError(message) {
        const errorsContainer = document.getElementById("errorsContainer");
        errorsContainer.textContent = message && message.length > 0 ? message : "Unhandled error is occured";
    }
</script>